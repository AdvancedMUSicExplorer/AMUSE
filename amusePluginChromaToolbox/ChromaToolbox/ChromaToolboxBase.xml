<amuseMatlabScript>
<text>
%
% ChromaToolboxBase.m
%%%%%%%%%%%%%%%%%%%
% This file is part of AMUSE framework (Advanced MUsic Explorer).
% 
% Copyright 2006-2012 by code authors
% 
% Created at TU Dortmundy, Chair of Algorithm Engineering
% (Contact: http://ls11-www.cs.tu-dortmund.de) 
%
% AMUSE is free software: you can redistribute it and/or modify
% it under the terms of the GNU Lesser General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% AMUSE is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public License
% along with AMUSE. If not, see: http://www.gnu.org/licenses/.
% 
% Created on 15.12.2009 by Igor Vatolkin
% Last modified on 16.03.2012 by Igor Vatolkin (update to Chroma Toolbox 2.0 and integration of CRP features)
% $Id: $
function ChromaToolboxBase(input_file,output_dir)

% Add the path to Chroma Toolbox
addpath('%AMUSEHOME%/tools/ChromaToolbox');

% define window length of analysis window in number of samples
wlength = 512;
% define window offset in number of samples
woffset = wlength;

% create prefix for AMUSE ARFF feature file
p=strfind(input_file,'/');
k=strfind(input_file,'.');
output_file_prefix = [output_dir,'/',input_file(p(end)+1:k(end)-1),'_'];
</text>
	
<amuseEnableTransform>
<transformContent>
        <text>
	  % Split the file name as required for wav_to_audio
	  p=strfind(input_file,'/');
	  dir_abs = input_file(1:p(end-4));
	  dir_rel = input_file(p(end-4)+1:p(end));
	  wavfilename = input_file(p(end)+1:length(input_file));
	  clear parameter;
	  parameter.message = 1;
	  [f_audio,sideinfo] = wav_to_audio(dir_abs, dir_rel, wavfilename, parameter);
	  
	  % Estimation of the global tuning of the recording and selection of
	  % an appropriate filterbank for use in the next step
	  clear parameter
	  shiftFB = estimateTuning(f_audio);
	  fprintf('Using filterbank number: %d\n',shiftFB);

	  % Compute pitch features
	  clear parameter
	  parameter.winLenSTMSP = 4410;
	  parameter.fs = sideinfo.wav.fs;
	  parameter.save = 0; % Do not save any results!
	  parameter.saveFilename = strcat(sideinfo.wav.filename(1:length(sideinfo.wav.filename)-4));
	  parameter.shiftFB = shiftFB;
	  parameter.saveAsTuned = 1;
	  parameter.visualize = 0; % Do not make any visualization!
	  [f_pitch,sideinfo] = audio_to_pitch_via_FB(f_audio,parameter,sideinfo);
	 </text> 
          
<amuseEnableFeature id="218" dimensions="12">
	<text>
	  % Compute CENS
	  win_len = 4410;
	  parameter.winLenSmooth = 21;
	  parameter.downsampSmooth = 5;
	  parameter.vis = 0;
	  parameter.featureRate = sideinfo.pitch.featureRate;
	  parameter.save=0;
	  %parameter.print = 0;
	  [f_CENS,sideinfo] = pitch_to_CENS(f_pitch,parameter,sideinfo);
	  arff_saver_with_windows_number_forCENS([output_file_prefix,'218.arff'],'Chroma Energy Normalized Statistics',f_CENS,11025,11025);
	 </text>
</amuseEnableFeature>
          
<amuseEnableTransform>
<transformContent>
<amuseEnableFeature id="219" dimensions="12">
	<text>
	  % Compute CRP
	  win_len = 4410;
	  parameter.coeffsToKeep = [55:120];
	  parameter.applyLogCompr = 1;
	  parameter.factorLogCompr = 1000;
	  parameter.featureRate = sideinfo.pitch.featureRate;
	  [f_CRP,sideinfo] = pitch_to_CRP(f_pitch,parameter,sideinfo);
	  arff_saver_with_windows_number_forCENS([output_file_prefix,'219.arff'],'Chroma DCT-Reduced log Pitch',f_CRP,11025,11025);
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="220" dimensions="66">
	<text>
	  % Compute strengths of CRP cooccurrences (1st dim: (CRP1+CRP2)/2; 2nd dim: (CRP1+CRP3)/2 etc.)
	  tw = length(f_CRP(1,:)); % Number of time windows
      co = zeros(tw,66);
	  curr_index = 1;
	  for i=1:tw % Go through time windows
	      for j=1:length(f_CRP(:,1)) % Go through chroma dimensions
	          for k=j+1:length(f_CRP(:,1)) % Go through chroma dimensions
		      co(i,curr_index) = (f_CRP(j,i) + f_CRP(k,i))/2;
		      curr_index = curr_index + 1;
		  end;
	      end;
	      curr_index = 1;
	  end;
	  arff_saver_with_windows_number_forCENS([output_file_prefix,'220.arff'],'Strengths of CRP cooccurrences',co',11025,11025);
	</text>
</amuseEnableFeature>
</transformContent>
</amuseEnableTransform>
</transformContent>
</amuseEnableTransform>

<text>
	exit
</text>

</amuseMatlabScript>
