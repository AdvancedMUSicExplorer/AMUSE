<amuseHarmonicFeaturesScript>
<text>
import os
import sys
import numpy as np
import src.tools.extract_features as extract_features

# Save the feature file
def output(outputFolder, musicFile, featureID, features, featureName):
    file = open(outputFolder + os.sep + musicFile[musicFile.rfind(os.sep):len(musicFile)-4] + "_" + featureID + ".arff", "w")
    file.write("@RELATION 'Music feature'\n")
    file.write("%rows=" + "1\n")
    file.write("%columns=" + str(len(features[0])) + "\n")
    file.write("%sample_rate=" + "22050\n")
    file.write("%window_size=" + "16384\n")
    file.write("%step_size=" + "2048\n")
    file.write("\n")
        
    file.write("@ATTRIBUTE '" + featureName + "' NUMERIC\n")
    file.write("@ATTRIBUTE WindowNumber NUMERIC\n")
        
    file.write("\n@DATA\n")
    for i in range(0, len(features[0])):
        for j in range(1, len(features)):
            file.write(str(features[j][i]) + ",")
        file.write(str(i+1) + "\n")
        
    file.close()

if __name__ == '__main__':
    
    if len(sys.argv) == 3: 
        musicFile = sys.argv[1]
        outputFolder = sys.argv[2]
</text>
<amuseEnableFeature id="431" dimensions="1">
	<text>
        featureName = "Chromaticity"
        features = extract_features.main(musicFile, ["chromaticity"])
        
        output(outputFolder=outputFolder, musicFile=musicFile, featureID="431", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="432" dimensions="1">
	<text>
        featureName = "Dyadicity"
        features = extract_features.main(musicFile, ["dyadicity"])
        
        output(outputFolder=outputFolder, musicFile=musicFile, featureID="432", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="433" dimensions="1">
	<text>
        featureName = "Triadicity"
        features = extract_features.main(musicFile, ["triadicity"])
        
        output(outputFolder=outputFolder, musicFile=musicFile, featureID="433", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="434" dimensions="1">
	<text>
        featureName = "Diminished Quality"
        features = extract_features.main(musicFile, ["dim_quality"])
        
        output(outputFolder=outputFolder, musicFile=musicFile, featureID="434", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="435" dimensions="1">
	<text>
        featureName = "Diatonicity"
        features = extract_features.main(musicFile, ["diatonicity"])

        output(outputFolder=outputFolder, musicFile=musicFile, featureID="435", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="436" dimensions="1">
	<text>
        featureName = "Wholetoneness"
        features = extract_features.main(musicFile, ["wholetoneness"])
        
        output(outputFolder=outputFolder, musicFile=musicFile, featureID="436", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<amuseEnableFeature id="437" dimensions="1">
	<text>
        featureName = "Dissonance"
        features = extract_features.main(musicFile, ["dissonance"])
        
        output(outputFolder=outputFolder, musicFile=musicFile, featureID="437", features=features, featureName=featureName)
	</text>
</amuseEnableFeature>
<text>     
    else:
        print("Not enough parameters used!")
        sys.exit()
</text>
</amuseHarmonicFeaturesScript>
